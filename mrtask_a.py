# Which vendors have the most trips, and what is the total revenue generated by that vendor?

# Importing the necessary libraries
from mrjob.job import MRJob
from mrjob.step import MRStep

class MyMapReduce(MRJob):

    #Creating the steps to be followed
    def steps(self):
        return  [
            MRStep (mapper=self.mapper,
                    reducer=self.reducer),
            MRStep (reducer=self.output_reducer)
            ]

    #This mapper code is for extracting the vendorID and all its revenues
    def mapper(self, _, line):
        if not line.startswith('VendorID'):
            data = line.split(',')
            vendorID = data[0]
            revenue = float(data[16])
            yield vendorID, revenue
    
    #This reducer code is for extracting the vendorID and sum of its respective revenues
    def reducer(self, vendorID, revenue):
        yield None, (vendorID, sum(revenue))
    
    #This reducer code is for finding the vendorID which has the most trips and revenue
    def output_reducer(self, _, values):
        vendorID, max_revenue = max(values)
        yield vendorID, max_revenue


if __name__ == '__main__':
    MyMapReduce.run()